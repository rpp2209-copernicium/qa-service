log_format upstreamlog '\n$server_name to: $upstream_addr[$request]\n'
  '\n upstream_response_time $upstream_response_time\n'
  '\n msec $msec request_time $request_time\n';

log_format rt_cache '\n cache status is: $upstream_cache_status\n'; 

# Load Balancer Config - Defaults to Round Robin

# PRE REQs
# Make sure that you have the PRIVATE IP addresses for the servers to load balance

# STEPS
# Configure Nginx / Docker locally

# Deploy an Nginx EC2 Instance for Load Balancer 
# (make sure instance allows incoming HTTP traffic on default port 80 => Nginx Instance Security Group)

# SSH into instance & build (copies over conf file, etc.)
# Run Nginx Container (via docker run command)

#proxy_cache_path /data/nginx/cache levels=1:2 keys_zone=my_cache:10m max_size=10g inactive=60m use_temp_path=off;
proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=my_cache:10m max_size=1000g inactive=60m use_temp_path=off;

# ⭐ Use `upstream` to define a Pool of servers to load balance 
# ⭐ PATTERN: server <public_api_ip4>:<port> <options>; 
upstream loadbalancer {
	#least_conn;
	server 44.203.124.1:8080 weight=6;
	server 44.203.124.1:8081 weight=2;
	server 44.203.124.1:8082 weight=2;
  }

# Forward traffic from '/' route to the load balancer
  server {
	# root /qa/questions; # Define the root route, all locations will be appended like so: /qa/questions/<location>
	
	# Forward traffic on port 80 to one of the servers in the loadbalancer group server
	listen 80; 
	
	server_name api;

	access_log /var/log/nginx/access.log upstreamlog;
	access_log /var/log/nginx/cache.log rt_cache;
	error_log /var/log/nginx/error_log info;
	add_header X-Cache-Status $upstream_cache_status;

	# REGEX to be used with cache settings (todo)
	#location ~* ^.+/d+/answers$	
	
	# For Answers at the end of the DB (in the millions)
	#location ~* ^.+/[23]d{6}/answers$	
	
	location / {
	  proxy_cache my_cache;
	  proxy_pass http://loadbalancer;
	  proxy_ignore_headers Cache-Control;
	  proxy_cache_valid any 1h;
	  proxy_cache_use_stale error timeout http_500 http_502 http_503 http_504;
	}
}
